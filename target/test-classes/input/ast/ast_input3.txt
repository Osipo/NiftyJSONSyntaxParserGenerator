{
    a = 15;
    b = a * 2 ^ 2 ^ 3; # 3840.
    c1 = -4.2E2; # -420.
    c2 = 1_000_000; # 1 million
    c3 = 0.01E-1; # 0.001
    c4 = -3_0.1_0_1E3; # -30101
    c5 = 1_000_000_000.0E-1_0; # 0.1
    {
        list = [1, 2, 'c', lambda (x) => { x = 10; lambda(y) => x * y;;}, "hello world", [5, 6, [7, "end"], 10], 100];

        list[1] = lambda (a, b) => { a = a; b = b; a + b; };  # first ; close function body, second ; close whole operator (assign stmt)

        f = list[1];
        g = lambda (x) => lambda(y) => y * x;;;
        list[0] = f(a * 2, f(10, 20)); # 10 + 20 + 15 * 2 = 60.
        q = f(a, b); # 15 + 3840 = 3855
        qq = list[0];
        q2 = f(list[0], 0); # 60 + 0 = 60.

        a2 = g(4);

        b2 = list[3]; # get function.
        b3 = b2(999); # x = 10. so 999 is skipped.

        a3 = a2(10); # 4 * 10 = 40.
        b4 = b3(1); # 1 * 10 = 10.

        list[2] = a2(a2(4)); # 4 * 4 * 4 = 64.

        list_2 = [list[0], list[list[0] - 58], f(0, 1) ];

        a10 = g(7)(6); # 7 * 6 = 42.
    }
}

# f = lambda(x) => lambda(y) => x * y;;;
# g = f(x);
# r = g(y);