{
    a = 2 * 2 ^ 2 ^ 3; // 512
    b = a - 2; // 510.
    co = (a == b); // 0.
    co2 = (a == 512); // 1.

    list = [1, 2 + 2 * 2 ^ 2, a, [4, 5, [6]], 'c'];

    fibo = lambda (n) => {
        if(n == 1 or n == 2)
            1;
        else
            if(n <= 0)
                -1;
            else
                fibo(n - 1) + fibo(n - 2);
    };

    fibo_tail = lambda (n) => {
        if(n == 1 or n == 2)
            1;
        else
            if(n <= 0)
                -1;
            else {
                a11 = 1; b11 = 1; x11 = 2;
                until(x11 == n){
                    c11 = a11 + b11;
                    a11 = b11;
                    b11 = c11;
                    x11 = x11 + 1;
                }
                c11;
            }
    };

    x = lambda(x, b) => {
        if(b == 10)
            x;
        else
            x(x - 10, 10); //the function name matches with parameter name.
    };

    f1 = fibo(-999); // -1.
    f2 = fibo(1); // 1.
    f3 = fibo(2); // 1.
    f4 = fibo(3); // call fibo(2) + fibo(1) => 1 + 1 => 2.
    ch = 'c';
    f5 = fibo(4); // call fibo(3) + fibo(2) => 2 + 1 => 3.
    f6 = fibo(5); // => 5.

    fx = x(10, 0); //b = 0 => x(10 - 10, 10) => 0.

    //false => skip while loop.
    while(fx <> 0)
        fx  = fx + 1;

    while(f6 <> 0){
        fx = fx + 1;
        f6 = f6 - 1;
    } //f6 = 0, fx = 5.

    until(f6 == 3){
        f6 = f6 + 1;
    }

    r1 = [1..10, 15..17];
    r1[..3] = 4;
    r1[10..] = 0;
    r1[4..1] = 100;
    r1[5..9] = -1;
    r1[0, 2..3] = 200;
    r1[fibo(6) + 1 .. 11] = 91011; // from 8 + 1 to 11 [9..11]

    fff = fibo(10); // 55
    fff2 = fibo_tail(20);
    //fff = fibo(20); // 6765 too long,
}
// this code is ignored as it comments.
/* fibo_new
if(n == 1 or n == 2) // $n -> [2..n - 1] => [2..19]
1;
if(n <= 0)
-1;
a = 1; b = 1; x = 2;
until(x == n){
    c = a + b;
    a = b;
    b = c;
    x = x + 1;
}

0, 1.
// 0 1 1 =>

0 = 0 + 1 => 1.
=> 1.
1 = 1 + 1 => 2.
=> 2.
2 = 2 + 2.
*/