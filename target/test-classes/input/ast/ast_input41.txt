{
    a = 2 * 2 ^ 2 ^ 3; // 512
    b = a - 2; // 510.
    co = (a == b); // 0. true = 1, false = 0.
    co2 = (a == 512); // 1.

    co3 = (0.5 and 1); // 0. as (atom >= 1) => 1 else 0.

    list = [1, 2 + 2 * 2 ^ 2, a, [4, 5, [6]], 'c'];

    fibo = lambda (n) => {
        if(n == 1 or n == 2)
            1;
        else
            if(n <= 0)
                -1;
            else
                fibo(n - 1) + fibo(n - 2);
    };

    fibo_tail = lambda (n) => {
        if(n == 1 or n == 2)
            1;
        else
            if(n <= 0)
                -1;
            else {
                a11 = 1; b11 = 1; x11 = 2;
                until(x11 == n){
                    c11 = a11 + b11;
                    a11 = b11;
                    b11 = c11;
                    x11 = x11 + 1;
                }
                c11;
            }
    };

    to_zero = lambda(x) => {
        if(x <= 0)
            x;
        else
            to_zero( x - 1 );
    };

    n_fact = lambda(n) => {
        if(n == 0)
            1;
        else
            n_fact(n - 1) * n;
    };

    n_fact_tail = lambda (n, a) => {
        if(n == 1)
            a;
        else
            n_fact_tail(n - 1, n * a);
    };

    n_fact_2 = lambda(n) => {
        n_fact_tail(n, 1);
    };

    x = lambda(x, b) => {
        if(b == 10)
            x;
        else
            x(x - 10, 10); //the function name matches with parameter name.
    };

    f1 = fibo(-999); // -1.
    f2 = fibo(1); // 1.
    f3 = fibo(2); // 1.
    f4 = fibo(3); // call fibo(2) + fibo(1) => 1 + 1 => 2.
    ch = 'c';
    f5 = fibo(4); // call fibo(3) + fibo(2) => 2 + 1 => 3.
    f6 = fibo(5); // => 5.

    fx = x(10, 0); //b = 0 => x(10 - 10, 10) => 0.

    //false => skip while loop.
    while(fx <> 0)
        fx  = fx + 1;

    while(f6 <> 0){
        fx = fx + 1;
        f6 = f6 - 1;
    } //f6 = 0, fx = 5.

    until(f6 == 3){
        f6 = f6 + 1;
    }

    r1 = [1..10, 15..17];
    r1[..3] = 4;
    r1[10..] = 0;
    r1[4..1] = 100;
    r1[5..9] = -1;
    r1[0, 2..3] = 200;
    r1[fibo(6) + 1 .. 11] = 91011; // from 8 + 1 to 11 => [9..11]

    fff = fibo(10); // 55
    fff2 = fibo_tail(20); //without recursion.
    //fff = fibo(20); // 6765 too long, because of 2^20 itrs with K nodes.

    to_zero_tail = lambda (x) => {
        top:
        if(x <= 0)
            x;
        else{
            {
                x = x - 1;
                goto top;
            }
        }
    };

    to_zero_tail2 = lambda (x) => {
        top:
        if(x <= 0)
            x;
        else{

            {
                x = x - 1;
                goto top;
            }
        }
    };

    zero = to_zero(10); //from 10 to 0.

    //nr = n_fact(12);
    nt = n_fact_2(12); // 6 => 720,  12 => 479_001_600

    bef = "Before goto terminate stmt";

    goto terminate;

    aft = "After goto stmt"; // this stmt will be skipped.

    terminate:
    last = 999;

    last2 = to_zero_tail2(15);
}