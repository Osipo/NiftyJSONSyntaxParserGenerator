module MyModule.Math
{
    pi = 3.14;

    odd = lambda(n) => { 2 * n + 1; };
    even = lambda(n) => { 2 * n; };
    odds = lambda(n) => { i = [1..n]; [gen odd(x) for x in i end]; };
    evens = lambda(n) => { i = [1..n]; [gen even(x) for x in i end]; };


    eq = lambda(x, y) => { x == y; };
    sum = lambda(l) => {
            s = 0;
            a = 0;
            b = len(l);
            while(a < b){
                s += l[a];
                a += 1;
            }
            s;
    };

    n_fact_tail = lambda (n, a) => {
       if(n == 1)
          a;
       else
          n_fact_tail(n - 1, n * a);
    };

    n_fact = lambda(n) => {
        n_fact_tail(n, 1);
    };

    E_M = lambda(n) => {
        i = [1..n];
        df = lambda(x, y) => {x == y;};
        fi = lambda(x) => {[gen df(x, j) for j in i end];};
        [gen fi(x) for x in i end];
    };

    E_ML = lambda(n) => {
        i = [1..n];
        [gen [gen eq(x, y) for y in i end] for x in i end];
    };

    cols = lambda(M) => {
        r = [0..len(M) - 1];
        c = [0..len(M[0]) - 1];
        [gen [gen M[y][x] for y in r end] for x in c end];
    };

    col = lambda(M, i) => {
        [gen M[x][i] for x in [..len(M) - 1] end];
    };

    pcol = lambda(C) => {
        i = len(C);
        ii = 0;
        p = [];
        while(ii < i){
            C_i = C[ii];
            j = len(C_i);
            jj = 0;
            while(jj < j){
                if(C_i[jj] > 0){
                    p = C_i;
                    goto M1;
                }
                jj += 1;
            }
            ii += 1;
        }
        M1:
        p;
    };

    inverse_m = lambda(M) => {
        i = len(M) - 1;
        j = len(M[0]) - 1;
        jj = j - 1;
        k = 0;
        kk = 0;
        el = M[0][0]; //first element

        pos_j = lambda(jj) => (jj > j) ? j - jj :: jj;; //resolve position j.
        pos_i = lambda(ii) => (ii > i) ? i - ii :: ii;; //resolve position i.

        while(kk <= i){
            ROW_I = [[[gen M[kk][k] / M[kk][kk] for k in [0..j] end], kk]]; //list of tuples: (list, num)

            c_j = [kk - [0..jj]];
            c_j = c_j[0];
            ROW_J = [gen [0, gen
                (M[kk][kk] * M[pos_i(_ + 1)][pos_j(x + 1)]
                 - M[pos_i(_ + 1)][kk] * M[kk][pos_j(x + 1)]
                ) / M[kk][kk]
               for x in [0..jj] end], pos_i(_ + 1)
               for _ in [0..i - 1] end];

            ROW_J = ROW_J + ROW_I;
            x = 0;
            while(x <= i){
                M[ROW_J[x][1]] = ROW_J[ROW_J[x][1]][0];
                x += 1;
            }

            kk += 1;
        }
        M;
    };

    fibo_sum = lambda (n) => {
            if(n == 1 or n == 2)
                1;
            else
                if(n <= 0)
                    -1;
                else {
                    a11 = 1; b11 = 1; x11 = 2;
                    until(x11 == n){
                        c11 = a11 + b11;
                        a11 = b11;
                        b11 = c11;
                        x11 = x11 + 1;
                    }
                    c11;
                }
    };
    E_4 = E_M(4);
    EE_4 = E_ML(4);
    o_10 = odds(10);
    e_10 = evens(10);
}