module MyModule.Math
{
    pi = 3.14;

    odd = lambda(n) => { 2 * n + 1; };
    even = lambda(n) => { 2 * n; };
    odds = lambda(n) => { i = [1..n]; [gen odd(x) for x in i end]; };
    evens = lambda(n) => { i = [1..n]; [gen even(x) for x in i end]; };


    eq = lambda(x, y) => { x == y; };
    sum = lambda(l) => {
            s = 0;
            a = 0;
            b = len(l);
            while(a < b){
                s += l[a];
                a += 1;
            }
            s;
    };

    E_M = lambda(n) => {
        i = [1..n];
        df = lambda(x, y) => {x == y;};
        fi = lambda(x) => {[gen df(x, j) for j in i end];};
        [gen fi(x) for x in i end];
    };

    E_ML = lambda(n) => {
        i = [1..n];
        [gen [gen eq(x, y) for y in i end] for x in i end];
    };

    cols = lambda(M) => {
        r = [0..len(M) - 1];
        c = [0..len(M[0]) - 1];
        [gen [gen M[y][x] for y in r end] for x in c end];
    };

    fibo_sum = lambda (n) => {
            if(n == 1 or n == 2)
                1;
            else
                if(n <= 0)
                    -1;
                else {
                    a11 = 1; b11 = 1; x11 = 2;
                    until(x11 == n){
                        c11 = a11 + b11;
                        a11 = b11;
                        b11 = c11;
                        x11 = x11 + 1;
                    }
                    c11;
                }
    };
    E_4 = E_M(4);
    EE_4 = E_ML(4);
    o_10 = odds(10);
    e_10 = evens(10);
}