module MatrixDet
from MyModule.Math import *
{

    M = [[4, 2, 5], [6, 4, 9], [7, 6, 13]];
    Q = [[[999, 2, 3, 4], 0], [[33,44,55], 1]];
    aaa = Q[0][0][0..1]; //=> [999, 2]
    bbb = Q[1][0][1..1]; //=> 44.
    ccc = ([] + bbb) + aaa;

    ddd = [] + Q[1][0][1..1] + Q[0][0][0..1]; // [44] + [999, 2] => [44, 999, 2].

    n = len(M);
    E = E_ML(n); //[gen [gen eq(x, y) for y in [1..n] end] for x in [1..n] end]

    M = [gen M[i] + E[i] for i in [..n - 1] end];
    MC = cols(M);
    MC = [gen MC[i][0] + 1000 for i in [0..len(MC) - 1] end];

    L = [1, 2, 3, 4, 5];
    L = [5 - L];
    L = L[0];

    last = M[-1][0]; //=> last row and first column => 7.
    M_R = inverse_m(M);

    /*
    SL = 5 - [0..10];
    L = [ [1], 2, 3];
    a = L[0][0];

    b = "abcd"[1]; // 0 => a, 1 => b, 2 => c, 3 => d.

    c = [1, 2, 3][2, 0][0]; // [1, 2, 3] => [3, 1] => [3].


    M1 = [gen x, y for x, y in [0..3] end];
    M2 = [gen x, y for x in [0..3], y in [0..1] end];
    M3 = [gen x for x in 1 - [0..4] end];
    M4 = [gen x, y for x in 1 - [0..2], y in 0 - [0..4] end];
    M5 = [gen x, y for x in [0..10] - [0..5], y in [1..2] end];

    a = 10;
    if(a > 0)
        if(a > 10)
            a = 1;
        else
            a = 2;
    else
        a = 3;
    */
}